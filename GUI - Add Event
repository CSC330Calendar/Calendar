package cal;

import java.awt.Color;
import java.awt.Dimension;

import javax.swing.text.BadLocationException;
import java.awt.List;
import java.awt.Toolkit;
import java.awt.Window;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.*;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

public class AddEvent extends javax.swing.JFrame {      
    public AddEvent() {
        initComponents();
        setTitle("Add Event");
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                help.closePath();
                System.exit(1);
            }
        });
    }

    private void initComponents() {
    	setJMenuBar(MenuExp.PrepareMenuBar());
        
        jButton1 = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        eventNameLabel = new javax.swing.JLabel();
        eventDateLabel = new javax.swing.JLabel();
        eventTimeLabel = new javax.swing.JLabel();
        eventNameTextBox = new javax.swing.JTextField();
        eventDetailsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventDescriptionTextBox = new javax.swing.JTextPane();
        buttonAmPm = new javax.swing.JButton();
        charactersRemainingLabel = new javax.swing.JLabel();
        completeButton = new javax.swing.JButton();
        isGroupEventCheckBox = new javax.swing.JCheckBox();
        groupComboBox = new javax.swing.JComboBox<>();
        eventTimeLabel1 = new javax.swing.JLabel();
        startHourDropDown = new javax.swing.JComboBox<>();
        startMinDropDown = new javax.swing.JComboBox<>();
        endHourDropDown = new javax.swing.JComboBox<>();
        endMinDropDown = new javax.swing.JComboBox<>();
        buttonAmPm2 = new javax.swing.JButton();
        monthDropDown = new javax.swing.JComboBox<>();
        dayDropDown = new javax.swing.JComboBox<>();
        yearDropDown = new javax.swing.JComboBox<>();
        invalidTimeLabel = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18));
        titleLabel.setText("Add Event");

        eventNameLabel.setFont(new java.awt.Font("Tahoma", 0, 16));
        eventNameLabel.setText("Event Name");

        eventDateLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); 
        eventDateLabel.setText("Event Date");

        eventTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); 
        eventTimeLabel.setText("Event Start");

        eventNameTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eventNameTextBoxKeyReleased(evt);
            }
        });

        eventDetailsLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); 
        eventDetailsLabel.setText("Event Details");

        eventDescriptionTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eventDescriptionTextBoxKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(eventDescriptionTextBox);

        buttonAmPm.setText("AM");
        buttonAmPm.setMaximumSize(new java.awt.Dimension(49, 23));
        buttonAmPm.setMinimumSize(new java.awt.Dimension(49, 23));
        buttonAmPm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buttonAmPmMouseReleased(evt);
            }
        });
        buttonAmPm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAmPmActionPerformed(evt);
            }
        });

        charactersRemainingLabel.setText("Characters remaining: 140");

        completeButton.setText("Ok");
        completeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeButtonActionPerformed(evt);
            }
        });

        isGroupEventCheckBox.setText("Group Event");
        isGroupEventCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isGroupEventCheckBoxActionPerformed(evt);
            }
        });

        getGroups();
        groupComboBox.setEnabled(false);
        groupComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupComboBoxActionPerformed(evt);
            }
        });

        eventTimeLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); 
        eventTimeLabel1.setText("Event End");

        String[] startHours = new String[12];
        for(int i = 0; i < 12; i++){
            startHours[i] = Integer.toString(i + 1);
        }
        startHourDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(startHours));
        startHourDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startHourDropDownActionPerformed(evt);
            }
        });

        startMinDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "30" }));
        startMinDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMinDropDownActionPerformed(evt);
            }
        });

        String[] hours = new String[12];
        for(int i = 0; i < 12; i++){
            hours[i] = Integer.toString(i + 1);
        }
        endHourDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(hours));
        endHourDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endHourDropDownActionPerformed(evt);
            }
        });

        endMinDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "30"}));
        endMinDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endMinDropDownActionPerformed(evt);
            }
        });

        buttonAmPm2.setText("AM");
        buttonAmPm2.setMaximumSize(new java.awt.Dimension(49, 23));
        buttonAmPm2.setMinimumSize(new java.awt.Dimension(49, 23));
        buttonAmPm2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buttonAmPm2MouseReleased(evt);
            }
        });
        buttonAmPm2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAmPm2ActionPerformed(evt);
            }
        });

        monthDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}));
        monthDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthDropDownActionPerformed(evt);
            }
        });

        String[] days = new String[31];
        for(int i = 0; i < 31; i++){
            days[i] = Integer.toString(i + 1);
        }
        dayDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(days));
        dayDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayDropDownActionPerformed(evt);
            }
        });

        String[] years = new String[50];
        for(int i = 0; i < 50; i++){
            years[i] = Integer.toString(2016 + i);
        }
        yearDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(years));
        yearDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearDropDownActionPerformed(evt);
            }
        });

        invalidTimeLabel.setVisible(false);
        invalidTimeLabel.setText("End Time Should Be After Start Time");
        today = LocalDateTime.now();

        //change these and the drop downs to update to today
        month = 1;
        date = 1;
        year = 2016;
        startTime = 10000;
        endTime = 10000;

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eventDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(charactersRemainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startHourDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(startMinDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(endHourDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(endMinDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonAmPm2, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                                    .addComponent(buttonAmPm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(invalidTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(isGroupEventCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(monthDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dayDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(eventNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(groupComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(yearDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(completeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isGroupEventCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventNameLabel)
                    .addComponent(eventNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(groupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(monthDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonAmPm, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(eventTimeLabel)
                        .addComponent(startHourDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startMinDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonAmPm2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(eventTimeLabel1)
                        .addComponent(endHourDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endMinDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invalidTimeLabel)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(eventDetailsLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charactersRemainingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(completeButton)
                .addGap(33, 33, 33))
        );
        setResizable(false);
        pack();
    }

    private void eventDescriptionTextBoxKeyReleased(java.awt.event.KeyEvent evt) {    
    	int maxSize = 140;
    	
    	if(eventDescriptionTextBox.getText().contains("'")){
        	maxSize--;
        }
    	
        if (eventDescriptionTextBox.getText().length() >= maxSize){
	        try {
                    eventDescriptionTextBox.setText(eventDescriptionTextBox.getText(0, maxSize));
                    } catch (BadLocationException e) {
                        e.printStackTrace();
                    }
	            	Color c = new Color(255, 0, 51);
                        charactersRemainingLabel.setForeground(c);
            	}
            	else {
            		Color c = new Color(0, 0, 0);
                        charactersRemainingLabel.setForeground(c);
            	}
        int rem = maxSize - eventDescriptionTextBox.getText().length();
        charactersRemainingLabel.setText("Characters Remaining: " + rem);  	 
    }                                                   

    private void buttonAmPmMouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(buttonAmPm.getText().equals("AM"))
    	   buttonAmPm.setText("PM");
       else
    	   buttonAmPm.setText("AM");
        
    }                                        

    private void completeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(!groupComboBox.isEnabled())
        	username = whichGroupToAddTo;
        
        startTime = (startTimeHour * 10000) + (startTimeMinute * 100);
        endTime = (endTimeHour * 10000) + (endTimeMinute * 100);
        
        System.out.println("month = " + month);
        System.out.println("day = " + date);
        System.out.println("year = " + year);
        System.out.println(today.getHour()*10000);
        System.out.println(startTime);
        
        if (buttonAmPm.getText().equals("PM")){
                startTime += 120000;
            } 
        if (buttonAmPm2.getText().equals("PM")){
                endTime += 120000;
        }
        
        if((buttonAmPm.getText().equals("PM") 
                && buttonAmPm2.getText().equals("AM")) 
                || (startTime >= endTime) 
                || (month < today.getMonthValue() && year == today.getYear()) 
                || (month == today.getMonthValue() && year == today.getYear() && date < today.getDayOfMonth())
                || eventNameTextBox.getText().length() == 0
                || startTime < (today.getHour() * 10000) && month == today.getMonthValue() && year == today.getYear() && date < today.getDayOfMonth()   )
        {
            invalidTimeLabel.setVisible(true);
            if (month < today.getMonthValue() && year == today.getYear())
                invalidTimeLabel.setText("Events Cannot Be In The Past");

            if((buttonAmPm.getText().equals("PM") && buttonAmPm2.getText().equals("AM")) || (startTime >= endTime))
                invalidTimeLabel.setText("End Time Should Be After Start Time");
        
            if(month == today.getMonthValue() && year == today.getYear() && date < today.getDayOfMonth())
                invalidTimeLabel.setText("Events Cannot Be In The Past");
            
            if (eventNameTextBox.getText().length() == 0)
                invalidTimeLabel.setText("Please Enter An Event Name");
            
            if (startTime < (today.getHour() * 10000) && month == today.getMonthValue() && year == today.getYear() && date < today.getDayOfMonth())
                invalidTimeLabel.setText("Events Cannot Be In The Past");
        }
        else{
            invalidTimeLabel.setVisible(false);
            
            
            addEventToDataBase();
            
           /* try {
				Profile.paintFrame();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
      		one.rootPane.repaint();
      		one.setVisible(false);*/
            
        }
    }                                              

    private void isGroupEventCheckBoxActionPerformed(java.awt.event.ActionEvent evt) { 
       if (groupComboBox.isEnabled())
           groupComboBox.setEnabled(false);
       else
           groupComboBox.setEnabled(true);
    }                                                    

    private void groupComboBoxActionPerformed(java.awt.event.ActionEvent evt) {     
    	groupPicked = true;
        System.out.println(groupComboBox.getSelectedIndex() + 1);
        whichGroupToAddTo = groups[groupComboBox.getSelectedIndex()];    	
    }                                             
    
    private void buttonAmPm2MouseReleased(java.awt.event.MouseEvent evt) {                                          
    
    }                                         

    private void buttonAmPmActionPerformed(java.awt.event.ActionEvent evt) {                                           

    }                                          

    private void buttonAmPm2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
       if(buttonAmPm2.getText().equals("AM"))
    	   buttonAmPm2.setText("PM");
       else
    	   buttonAmPm2.setText("AM");
    }                                           

    private void monthDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                              
        month = monthDropDown.getSelectedIndex() + 1;
        correctTheDaysDropDown();
        System.out.println("month = " + month);
    }                                             

    private void dayDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                            
        date = dayDropDown.getSelectedIndex() + 1;
        System.out.println("date = " + date);
    }                                           

    private void yearDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                             
        year = yearDropDown.getSelectedIndex() + 1;
        year += 2015;
        System.out.println("year = " + year);
        
        if(isLeapYear(year) && month == 2)
        	correctTheDaysDropDown();
    }                                            
    
    private void correctTheDaysDropDown(){
        String[] days  = {};
        if(month == 2 && isLeapYear(year)){
            days = new String[29];
            for(int i = 0; i < 29; i++){
                days[i] = Integer.toString(i + 1);
            }
        }
        else if (month == 2 && !isLeapYear(year)){
            days = new String[28];
            for(int i = 0; i < 28; i++){
                days[i] = Integer.toString(i + 1);
            }
        }
        else if (month == 4 || month == 6 || month == 9 || month == 11){
            days = new String[30];
            for(int i = 0; i < 30; i++){
                days[i] = Integer.toString(i + 1);
            }
        }
        else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
            days = new String[31];
            for(int i = 0; i < 31; i++){
                days[i] = Integer.toString(i + 1);
            }
        }
        
        dayDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(days));
    }
    
    private boolean isLeapYear(int leap){
        return ((leap % 400 == 0) || ((leap % 4 == 0) && (leap % 100 != 0)));
    }
    
    private void startHourDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        startHourPicked = true;
    	startTimeHour = startHourDropDown.getSelectedIndex() + 1;
        System.out.println("startTimeHour = " + startTimeHour);
    }                                                 

    private void startMinDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        startTimeMinute = startMinDropDown.getSelectedIndex();
        startTimeMinute *= 30;
        System.out.println("startTimeMinute = " + startTimeMinute);
    }                                                

    private void endHourDropDownActionPerformed(java.awt.event.ActionEvent evt) {  
    	endHourPicked = true;
        endTimeHour = endHourDropDown.getSelectedIndex() + 1;
        System.out.println("endTimeHour = " + endTimeHour);
    }                                               

    private void endMinDropDownActionPerformed(java.awt.event.ActionEvent evt) {                                               
        endTimeMinute = endMinDropDown.getSelectedIndex();
        endTimeMinute *= 30;
        System.out.println("endTimeMinute = " + endTimeMinute);
    }                                              

    private void eventNameTextBoxKeyReleased(java.awt.event.KeyEvent evt) { 
    	int maxSize = 16;
    	
    	if(eventNameTextBox.getText().contains("'")){
        	maxSize--;
        }
        if(eventNameTextBox.getText().length() >= 16){
        	try{
                eventNameTextBox.setText(eventNameTextBox.getText(0, maxSize));
            }catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }                                            
    
    //note: if event name contains two apostrophes, a SQL exception will be thrown
    //ie if the user enter's Dad's son's then the first apostrophe will be escape
    //sequenced but the second is going to be interpreted by SQL as the end of the 
    //event name and whatever comes after will be seen as a syntax error
    //This same issue applies to event description
    
    private boolean isEventTimeAvailable(){
    	ArrayList times;
    	if (groupComboBox.isEnabled())
    		times = help.isTimeAvailableForEvent(whichGroupToAddTo, "", true);
    	else
    		times = help.isTimeAvailableForEvent("", username, false);
    	
       String timeS, timeE;
       boolean dateHasEvent = false;
       
       if(String.valueOf(month).length() == 1)
    	   fullDate = "0" + String.valueOf(month);
       
       fullDate += "/";
       
       if(String.valueOf(date).length() == 1)
    	   fullDate += "0" + String.valueOf(date);
       else
    	   fullDate += String.valueOf(date);
       
       fullDate += "/";
       
       fullDate += String.valueOf(year);
       
       System.out.println("Times = " + times);
       
       Integer startTimeEvent = null, endTimeEvent = null;
         for(int i = 0; i < times.size()/4; i++){
			if(fullDate.equals(times.get(i * 4 + 2))){
				dateHasEvent = true;
				startTimeEvent = Integer.valueOf(times.get(i * 4).toString().substring(0, 2) + times.get(i * 4).toString().substring(3, 5) + "00");
				endTimeEvent = Integer.valueOf(times.get(i * 4 + 1).toString().substring(0, 2) + times.get(i * 4 + 1).toString().substring(3, 5) + "00");
				
				//if starting time is between start and finish of another event...
				if(startTime >= startTimeEvent 
						&& Integer.valueOf(startTime) < endTimeEvent){
					eventNameAtChosenTime = times.get(i * 4 + 3).toString();
					return false;
					
				}
				//if the end time cuts into the start time of another event...
				if(Integer.valueOf(endTime) > startTimeEvent)
				{
					eventNameAtChosenTime = times.get(i * 4 + 3).toString();
					return false;
				}
			}
		}
    		
    	return true;
    }
    
    private void addEventToDataBase(){
    	if(groupComboBox.isEnabled() && !groupPicked)
    		whichGroupToAddTo = groups[0];
    	
    	if(!startHourPicked)
    		startTimeHour = 1;
    	if (!endHourPicked)
    		endTimeHour = 1;
    	
    	String eventName = eventNameTextBox.getText();
    	if (eventName.contains("'")){
    		int f = eventName.indexOf('\'');
    		eventName = eventName.substring(0, f) + "\\'" + eventName.substring(f + 1, eventName.length());
    		System.out.println(eventName);
    	}
    	
    	String eventDescription = eventDescriptionTextBox.getText();
    	if (eventDescription .contains("'")){
    		int f = eventDescription .indexOf('\'');
    		eventDescription = eventDescription.substring(0, f) + "\\'" + eventDescription.substring(f + 1, eventDescription.length());
    		System.out.println(eventDescription);
    	}
    	
        int a = -1, numMem = help.getNumberOfGroupMembers(whichGroupToAddTo);
        if(numMem == 0)
    	   numMem++;       
       
        a = help.getHighestPrimaryKey("theEvent") + 1;
        
        username = user.getUsername();
        
        if(!groupComboBox.isEnabled())
        	whichGroupToAddTo = username;
        
        ArrayList insert = new ArrayList();
        
        insert.add(a);
        insert.add(eventName);
        insert.add(whichGroupToAddTo);
        insert.add(month + "/" + date + "/" + year);
        insert.add(startTime);
        insert.add(endTime);
        insert.add(eventDescription);
        insert.add(1);
        insert.add(numMem);
          
       Boolean one = isEventTimeAvailable();
        System.out.println(insert);
        
       if(one.equals(true)){
        	help.insertEvent(insert);
       }
       else{
    	   if(groupComboBox.isEnabled())
    		   invalidTimeLabel.setText("That time is unavailable for " + whichGroupToAddTo);
    	   else
    		   invalidTimeLabel.setText("You have \"" + eventNameAtChosenTime + "\" at that time");
    	   invalidTimeLabel.setVisible(true);
       }
    }   
    
    
    private void getGroups(){
        listOfGroups = (List)help.getGroups(username);
        groups = new String [listOfGroups.getItemCount()];
    	
    	for(int i = 0; i < listOfGroups.getItemCount(); i++){
    		groups[i] = listOfGroups.getItem(i);
    	}
    	
    	groupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(groups));
    }
    
     public static void paintFrame(User locUser){
    	 user = locUser;
    	 username = user.getUsername();
    	 java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
            	 one = new AddEvent();
             	 JFrame frame = (JFrame) SwingUtilities.getRoot(groupComboBox);
            	 one.centerWindow(frame);
                 one.setVisible(true);
             }
         });
    }
    
     public static void centerWindow(Window frame){
    	 Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    	 int x = (int) ((dimension.getWidth() - frame.getWidth())/2);
    	 int y = (int) ((dimension.getHeight() - frame.getHeight())/2);
    	 
    	 frame.setLocation(x, y);
     }
     
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
      
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	 one = new AddEvent();
             	 JFrame frame = (JFrame) SwingUtilities.getRoot(groupComboBox);
            	 one.centerWindow(frame);
                 one.setVisible(true);
            }
        });
    }
    
    LocalDateTime today;
    boolean startHourPicked = false, endHourPicked = false, 
    			groupPicked = false, isGroupEvent = false;
    static User user;
    private List listOfGroups;
    private static String whichGroupToAddTo, insertion, username, fullDate, eventNameAtChosenTime;
    private String[] groups;
    
    private int startTimeHour, startTimeMinute, endTimeHour, endTimeMinute,
            month, date, year, startTime, endTime;
    
    private static SQLHelper help = new SQLHelper();
    private static AddEvent one;
    
    private javax.swing.JLabel charactersRemainingLabel, eventDateLabel,
    			eventDetailsLabel, eventNameLabel, eventTimeLabel, eventTimeLabel1,
    			invalidTimeLabel, titleLabel;
    
    private javax.swing.JButton jButton1, buttonAmPm, buttonAmPm2, completeButton;
    
    private javax.swing.JComboBox<String> monthDropDown, startHourDropDown, startMinDropDown,
    			yearDropDown, dayDropDown, endHourDropDown, endMinDropDown;
    
    private static javax.swing.JComboBox<String> groupComboBox;
    private javax.swing.JCheckBox isGroupEventCheckBox;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField eventNameTextBox;
    private javax.swing.JTextPane eventDescriptionTextBox;
}

