package cal;

import java.util.ArrayList;
import java.util.HashMap;
import java.awt.List;

public class User {
	private static SQLHelper help = new SQLHelper();
	private static String username;
	
	private List iAreAdmin = new List();
	private List myGroups = new List();
	
	private ArrayList<Event> notifications_ev = new ArrayList<Event>();
	private ArrayList<Notification_Group> notifications_gr = new ArrayList<Notification_Group>();
	private ArrayList<CancelledEventNotification> notifications_cancelled_ev = new ArrayList<CancelledEventNotification>();
	
	private HashMap<String, Event> myEvents = new HashMap<String, Event>();
	private static HashMap<String, Integer> copyOfMyEventsForFindingIfThereIsAnEvent = new HashMap<String, Integer>();

	public static void main(String[] args){
		User moshe = new User("Moshe");
		
	}
	
	User(String username){
		this.username = username;
		myEvents = initEvents();
		myGroups = (List) help.getGroups(username);
		notifications_ev = help.getEventNotifications(username);
		notifications_gr = help.getGroupNotifications(username);
		notifications_cancelled_ev = help.getCancelledEventNotifications(username);
	}
	
	private static void putEventDatesIntoCopyOfMyEvents(String date){
		if(copyOfMyEventsForFindingIfThereIsAnEvent.containsKey(date)){
			int a = copyOfMyEventsForFindingIfThereIsAnEvent.get(date);
			copyOfMyEventsForFindingIfThereIsAnEvent.replace(date, a, a++);
		}
		else
			copyOfMyEventsForFindingIfThereIsAnEvent.put(date, 1);
	}
	
	private static HashMap<String, Event> initEvents(){
		ArrayList<Object> cur = help.getEvents(username),
				 temp = new ArrayList();	
		
		int numEvents = help.getNumberOfEventsByUser(username);
		HashMap<String, Event> these = new HashMap<String, Event>();
		Event event;
		String delimiter = help.getDelimiter();
		
		for(int i = 0; i < cur.size(); i++){
			if(!cur.get(i).equals(delimiter)){
				temp.add(cur.get(i));	
				if(i % 10 == 3)
					putEventDatesIntoCopyOfMyEvents((String) cur.get(i));
			}
			else{
				event = new Event(temp);
				temp = new ArrayList();
				
				these.put(event.getDateTime(), event);
				}
		}
		
		return these;
	}
	
	
	public String getUsername(){
		return username;
	}
	
	private void addAdminRights(String groupName){
		iAreAdmin.add(groupName);
	}
	
	private boolean isAdmin(String groupName){
		int i = help.isUserAdmin(username);
		
		if (i == 1)
			return true;

		return false;
	}
	
	public boolean isThereAnEventToday(String date){
		if (copyOfMyEventsForFindingIfThereIsAnEvent.containsKey(date))
			return true;
		
		return false;
	}
	
	/*
	 This method was taken out back and shot in the face. 
	 It's too much more efficient to get the date from
	 memory, rather than query to SQL that many times
	  
	private boolean isThereAnEventToday(String date){
		String query = "select * from theEvent where user_groupID = '"  
					+ username + "' and dateOfEvent = '" + date + "'";
		
		String result = help.query(query);
		
		for(int i = 0; i < result.length(); i++){
			if (result.charAt(i) != ' ')
				return true;	
		}
		
		return false;
	}*/
	
	public boolean equals(String username){
		return (username.equals(this.username));
	}
		
	Event getEvent(String dateTime){
		return myEvents.get(dateTime);
	}
	
	public void deleteEvent(String dateTime){
		String date = dateTime.substring(0, 10),
				time = dateTime.substring(10, 12) + dateTime.substring(13, 15) + "00";
		
		help.deleteEvent(username, date, Integer.parseInt(time));
		
		
		//this needs some form of testing or verification
		//I have no indication yet that it works...
		
		myEvents.remove(dateTime);
		copyOfMyEventsForFindingIfThereIsAnEvent.remove(date);	
		
	}
	
	public void acceptEventInvite(Event event){
		help.deleteNotificationEvent(new User(username), event);
		notifications_ev.remove(event);
		help.giveYourApproval(event);
	}
	
	public void rejectEventInvite(Event event){
		help.deleteNotificationEvent(new User(username), event);
		notifications_ev.remove(event);
		
		//send a cancelled eventNotification to all users
		//remove event from SQL and all other places that the event
		//has been placed into
	}

	public void acceptGroupInvite(Notification_Group notif){
		help.addUserToGroup(username, notif.getGroupName(), 0);		
		myGroups.add(notif.getGroupName());
		
		help.deleteNotificationGroup(notif);
		notifications_gr.remove(notif);
	}
	
	public void rejectGroupInvite(Notification_Group notif){
		help.deleteNotificationGroup(notif);
		notifications_gr.remove(notif);
	}
	
	public void addEvent(Event event){
		if(!myEvents.containsKey(event.getDateTime()))
			myEvents.put(event.getDateTime(), event);
		else System.out.println("you dun goofed");
	}	
	
	public void deleteCancelledEventNotification(CancelledEventNotification cen){
		notifications_cancelled_ev.remove(cen);
		help.deleteCancelledEventNotification(cen);
	}
	
	public void addEventCancelledNotification(CancelledEventNotification cen){
		notifications_cancelled_ev.add(cen);
		help.addEventCancelledNotification(cen);
	}
	
	public void addNotificationGroupRequest(Notification_Group gr){
		notifications_gr.add(gr);
		help.addNotificationGroupRequest(gr);
	}
	
	public void addNewEventNotification(Event evt){
			notifications_ev.add(evt);
			help.addNewEventNotification(evt, username);	
	}
	
}







