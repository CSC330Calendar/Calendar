package cal;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;

public class NewUser extends javax.swing.JFrame {
	String temp = new String("");
    private static NewUser one;
    private static SQLHelper help = new SQLHelper();
	
	public NewUser() {
        initComponents();
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                help.closePath();
                System.exit(1);
            }
        });
    }    
	
	private void initComponents() {

    	setTitle("New User");
        titleLabel = new JLabel("<HTML><font face = 'Sitka Heading' size = '8'><I><U>Create User</U></I></font></HTML>", SwingConstants.CENTER);
        inputNameTextBox = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordLabel2 = new javax.swing.JLabel();
        enterButton = new javax.swing.JButton();
        noMatchLabel = new javax.swing.JLabel();
        usernameTaken = new javax.swing.JLabel();

      
        jp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jp1ActionPerformed(evt);
            }
        });

        inputNameTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNameTextBoxActionPerformed(evt);
            }
        });
        inputNameTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputNameTextBoxKeyReleased(evt);
            }
        });
        
        jp1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jp1KeyReleased(evt);
            }
        });
        
        jp2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jp2KeyReleased(evt);
            }
        });
        
        //allows user to press enter instead of clicking the "Create Account" button
        jp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	enterButtonActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        usernameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        passwordLabel.setText("Password:");

        passwordLabel2.setFont(new java.awt.Font("Tahoma", 0, 14));
        passwordLabel2.setText("Verify Password:");

        enterButton.setFont(new java.awt.Font("Tahoma", 0, 16)); 
        enterButton.setText("Create Account");
        enterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterButtonMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                enterButtonMouseReleased(evt);
            }
        });
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        noMatchLabel.setForeground(new java.awt.Color(204, 0, 0));
        noMatchLabel.setText("Passwords do not match");
        noMatchLabel.setVisible(false);
        usernameTaken.setForeground(new java.awt.Color(204, 0, 0));
        usernameTaken.setText("That username is already taken");
        usernameTaken.setVisible(false);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(passwordLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputNameTextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(enterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTaken, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noMatchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addGap(3, 3, 3)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(usernameTaken)
                .addGap(2, 2, 2)
                .addComponent(noMatchLabel)
                .addGap(18, 18, 18)
                .addComponent(enterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap()
                .addGap(30, 30, 30))
        );

        pack();
    }                     

	
	//must use deprecated function getText() to ensure max size of 16
	private static void jp1KeyReleased(java.awt.event.KeyEvent evt) {
		if(jp1.getText().length() >= 16){
            try{
            jp1.setText(jp1.getText(0, 16));
            }catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
	}   
	
	//must use deprecated function getText() to ensure max size of 16
	private static void jp2KeyReleased(java.awt.event.KeyEvent evt) {
		if(jp2.getText().length() >= 16){
            try{
            jp2.setText(jp2.getText(0, 16));
            }catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
	}   
	
    private static void enterButtonMouseClicked(java.awt.event.MouseEvent evt) {                                      
        
    }                                     

    private static void inputNameTextBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
      
    }                                           

    private static void inputNameTextBoxKeyReleased(java.awt.event.KeyEvent evt) {
	    	if(inputNameTextBox.getText().length() >= 16){
	            try{
	            inputNameTextBox.setText(inputNameTextBox.getText(0, 16));
	            }catch (BadLocationException e) {
	                e.printStackTrace();
	            }
	        }
    		String input = inputNameTextBox.getText();
	    	String get = new String(help.query("select username from thecalendar.friend where username = '" + input +"'"));

	    	if((input.toLowerCase()).equals((get).toLowerCase())){
	    		usernameTaken.setText("That username is already taken");
	    		usernameTaken.setVisible(true);
	    	}
	    	else if(!(input.toLowerCase()).equals((get).toLowerCase())){
	    		usernameTaken.setText("That username is already taken");
	    		usernameTaken.setVisible(false);
	    	}
    }     

    private static void enterButtonMouseReleased(java.awt.event.MouseEvent evt) {                                       
   
    }                                      

    private static void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {    
    	String usernameInput = inputNameTextBox.getText();
    	char[] passwordInputC = jp1.getPassword(),
    			passwordVerifyC = jp2.getPassword();
	    String passwordInput = new String(passwordInputC), 
	    		passwordVerify = new String(passwordVerifyC);
	   
	    if (passwordInput.equals(passwordVerify)){
	    	noMatchLabel.setVisible(false);
	    }
	    else {
	    	noMatchLabel.setVisible(true);
	    }
    	
	    if ((usernameInput).equals("")){
    		usernameTaken.setText("You must enter a username");
    		usernameTaken.setVisible(true);
	    }
	    
    	if (!noMatchLabel.isVisible() && !usernameTaken.isVisible()){
    		
    		try {
				Profile.paintFrame();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
      		one.rootPane.repaint();
      		one.setVisible(false);
    		
    		SelfClosingMessage.output("Welcome!", "", 1000);
    		
    		help.insertUsernamePassword(usernameInput, passwordInput);
    		
    	}
    }                                        

    private static void jp1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	
    }                                           

    public static void paintFrame(){
    	 java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
            	 one = new NewUser();
            	 JFrame frame = (JFrame) SwingUtilities.getRoot(jp1);
               	 one.centerWindow(frame);
                 one.setVisible(true);
             }
         });
    }

    public static void centerWindow(Window frame){
   	 Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
   	 int x = (int) ((dimension.getWidth() - frame.getWidth())/2);
   	 int y = (int) ((dimension.getHeight() - frame.getHeight())/2);
   	 
   	 frame.setLocation(x, y);
    }
    
    public static void main(String args[]) {
          try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                paintFrame();
            }
        });
    }

    private static javax.swing.JButton enterButton;
    private static javax.swing.JLabel titleLabel;
    private static javax.swing.JLabel usernameLabel;
    private static javax.swing.JLabel passwordLabel;
    private static javax.swing.JLabel passwordLabel2;
    private static javax.swing.JLabel noMatchLabel;
    private static javax.swing.JLabel usernameTaken;
    private static javax.swing.JPasswordField jp1 = new JPasswordField();
    private static javax.swing.JTextField inputNameTextBox;
    private static javax.swing.JPasswordField jp2 = new JPasswordField();
}
