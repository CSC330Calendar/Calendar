package cal;

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import javax.swing.*;
import javax.swing.text.BadLocationException;

@SuppressWarnings("serial")
public class NewUser extends JFrame {
    private static JButton enterButton = new JButton();
    
    private static JLabel titleLabel = new JLabel("<HTML><font face = 'Sitka Heading' size = '6'><I><U>Create User</U></I></font></HTML>", SwingConstants.CENTER), 
    		usernameLabel = new JLabel(), passwordLabel = new JLabel(), passwordLabel2 = new JLabel(), 
    		noMatchLabel = new JLabel(), usernameTaken = new JLabel();
    
    private static JPasswordField jp1 = new JPasswordField(), jp2 = new JPasswordField();
    
    private static JTextField inputNameTextBox = new JTextField();
	String temp = new String("");
    private static NewUser one;
    private static SQLHelper sqlHelper = new SQLHelper();
	
	public NewUser() {
        initComponents();
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                sqlHelper.closePath();
                System.exit(1);
            }
        });
    }    
	
	private void initComponents() {

    	setTitle("New User");

    	//setDefaultCloseOperation( WindowConstants.EXIT_ON_CLOSE);   

        jp1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jp1ActionPerformed(evt);
            }
        });

        inputNameTextBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                inputNameTextBoxActionPerformed(evt);
            }
        });
        inputNameTextBox.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                inputNameTextBoxKeyReleased(evt);
            }
        });
        
        jp1.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jp1KeyReleased(evt);
            }
        });
        
        jp2.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jp2KeyReleased(evt);
            }
        });
        
        //allows user to press enter instead of clicking the "Create Account" button
        jp2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	enterButtonActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        usernameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); 
        passwordLabel.setText("Password:");

        passwordLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        passwordLabel2.setText("Verify Password:");

        enterButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        enterButton.setText("Create Account");
        enterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                enterButtonMouseClicked(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                enterButtonMouseReleased(evt);
            }
        });
        enterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        noMatchLabel.setForeground(new java.awt.Color(204, 0, 0));
        noMatchLabel.setText("Passwords do not match");
        noMatchLabel.setVisible(false);
        usernameTaken.setForeground(new java.awt.Color(204, 0, 0));
        usernameTaken.setText("That username is already taken");
        usernameTaken.setVisible(false);
        
         GroupLayout layout = new  GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        
        layout.setHorizontalGroup(
            layout.createParallelGroup( GroupLayout.Alignment.LEADING)
            .addGroup( GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.TRAILING, false)
                    .addComponent(passwordLabel2,  GroupLayout.Alignment.LEADING,  GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(passwordLabel,  GroupLayout.Alignment.LEADING,  GroupLayout.DEFAULT_SIZE,  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameLabel,  GroupLayout.Alignment.LEADING,  GroupLayout.DEFAULT_SIZE,  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap( LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.TRAILING)
                    .addComponent(jp2,  GroupLayout.PREFERRED_SIZE, 138,  GroupLayout.PREFERRED_SIZE)
                    .addComponent(jp1,  GroupLayout.Alignment.LEADING,  GroupLayout.PREFERRED_SIZE, 138,  GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputNameTextBox,  GroupLayout.Alignment.LEADING,  GroupLayout.PREFERRED_SIZE, 138,  GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(enterButton,  GroupLayout.DEFAULT_SIZE,  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(titleLabel,  GroupLayout.PREFERRED_SIZE, 171,  GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup( GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap( GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTaken,  GroupLayout.PREFERRED_SIZE, 210,  GroupLayout.PREFERRED_SIZE)
                    .addComponent(noMatchLabel,  GroupLayout.PREFERRED_SIZE, 210,  GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup( GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel,  GroupLayout.PREFERRED_SIZE, 41,  GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputNameTextBox,  GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE,  GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addGap(3, 3, 3)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE)
                    .addComponent(jp1,  GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE,  GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel,  GroupLayout.DEFAULT_SIZE,  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE)
                    .addComponent(jp2,  GroupLayout.PREFERRED_SIZE,  GroupLayout.DEFAULT_SIZE,  GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel2,  GroupLayout.DEFAULT_SIZE,  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(usernameTaken)
                .addGap(2, 2, 2)
                .addComponent(noMatchLabel)
                .addGap(18, 18, 18)
                .addComponent(enterButton,  GroupLayout.PREFERRED_SIZE, 37,  GroupLayout.PREFERRED_SIZE)
                .addContainerGap()
                .addGap(30, 30, 30))
        );
        setResizable(false);
        pack();
    }// </editor-fold>                        

	
	//must use deprecated function getText() to ensure max size of 16
	@SuppressWarnings("deprecation")
	private static void jp1KeyReleased(KeyEvent evt) {
		if(jp1.getText().length() >= 16){
            try{
            jp1.setText(jp1.getText(0, 16));
            }catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
	}   
	
	//must use deprecated function getText() to ensure max size of 16
	@SuppressWarnings("deprecation")
	private static void jp2KeyReleased(KeyEvent evt) {
		if(jp2.getText().length() >= 16){
            try{
            jp2.setText(jp2.getText(0, 16));
            }catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
	}   
	
    private static void enterButtonMouseClicked(MouseEvent evt) {                                      
        
    }                                     

    private static void inputNameTextBoxActionPerformed(ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private static void inputNameTextBoxKeyReleased(KeyEvent evt) {
	    	if(inputNameTextBox.getText().length() >= 16){
	            try{
	            inputNameTextBox.setText(inputNameTextBox.getText(0, 16));
	            }catch (BadLocationException e) {
	                e.printStackTrace();
	            }
	        }
    		String input = inputNameTextBox.getText();
	    	String get = new String(sqlHelper.getUsername(input));

	    	if((input.toLowerCase()).equals((get).toLowerCase())){
	    		usernameTaken.setText("That username is already taken");
	    		usernameTaken.setVisible(true);
	    	}
	    	else if(!(input.toLowerCase()).equals((get).toLowerCase())){
	    		usernameTaken.setText("That username is already taken");
	    		usernameTaken.setVisible(false);
	    	}
    }     

    private static void enterButtonMouseReleased(MouseEvent evt) {                                       
   
    }                                      

    private static void enterButtonActionPerformed(ActionEvent evt) {  
    	String usernameInput = inputNameTextBox.getText();
    	char[] passwordInputC = jp1.getPassword(),
    			passwordVerifyC = jp2.getPassword();
	    String passwordInput = new String(passwordInputC), 
	    		passwordVerify = new String(passwordVerifyC);
	   
	    if (passwordInput.equals(passwordVerify)){
	    	noMatchLabel.setVisible(false);
	    }
	    else {
	    	noMatchLabel.setVisible(true);
	    }
    	
	    if ((usernameInput).equals("")){
    		usernameTaken.setText("You must enter a username");
    		usernameTaken.setVisible(true);
	    }
	    
    	if (!noMatchLabel.isVisible() && !usernameTaken.isVisible()){
    		sqlHelper.insertUsernamePassword(usernameInput, sqlHelper.encrypt(passwordInput));
    		
    		try {
				Profile.paintFrame(new User(inputNameTextBox.getText()));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
      		
    		one.rootPane.repaint();
      		one.setVisible(false);
    		
    		SelfClosingMessage.output("Welcome!", "", 2500);
    	}
    }                                        

    private static void jp1ActionPerformed(ActionEvent evt) {                                            
    	
    }                                           

    public static void paintFrame(){
    	 java.awt.EventQueue.invokeLater(new Runnable() {
             @SuppressWarnings("static-access")
			public void run() {
            	 one = new NewUser();
            	 JFrame frame = (JFrame) SwingUtilities.getRoot(jp1);
               	 one.centerWindow(frame);
                 one.setVisible(true);
             }
         });
    }

    public static void centerWindow(Window frame){
   	 Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
   	 int x = (int) ((dimension.getWidth() - frame.getWidth())/2);
   	 int y = (int) ((dimension.getHeight() - frame.getHeight())/2);
   	 
   	 frame.setLocation(x, y);
    }
    
    public static void main(String args[]) {
          try {
            for ( UIManager.LookAndFeelInfo info :  UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                     UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch ( UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                paintFrame();
                
            }
        });
    }
}
