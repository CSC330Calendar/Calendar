/*
Place this in the constructor of any class that uses SQLHelper 
"help" is the variable name I used, change it to the name of your instance
Note: this should also be used to handle memory upon closing

     setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("closing...");
                help.closePath();
                System.exit(1);
            }
        });

*/


package cal;

import java.awt.List;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class SQLHelper {
	/* massive edit to this class...
	* no more static methods, when we used them like that before they had to
	* recreate the connection every time and it costed a lot of time
	* now the only static method is closePath() and it should be called at 
	* the end of any class that uses SQLHelper. Any class that wants to use
	* the methods here will need a local instance of this class and will have
	* a connection set up for all calls */
	
	
	private static Connection connection;
	private static Statement statement;
	private static ResultSet resultSet;
	private static String queryResult;
	private static String url;
		
	
	SQLHelper(){

		//change this to your localhost's username and password
		url = "jdbc:mysql://localhost/thecalendar?useSSL=false&user=root&password=6815";

		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement() ;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public static void main(String[] args){
		SQLHelper help = new SQLHelper();
		ArrayList list = new ArrayList();
		list.add(2);
		list.add("a");
		list.add("l");
		help.insert("theevent", list);
	}
	
	public static void closePath(){
		try {
			if(statement != null ) 
				statement.close(); 
			if(connection != null) 
				connection.close(); 
			if(resultSet != null) 
				resultSet.close(); 
		}
		catch(SQLException ex ) {} 
	}
	
	public boolean queryUsernamePassword(String username, String password){
		String query = "select userpassword from friend where username = '" + username + "'";
		try {
			resultSet = statement.executeQuery(query);
			while(resultSet.next())
				queryResult = resultSet.getString(1);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		System.out.println(queryResult);
		
		if (password.equals(queryResult))
			return true;
		else 
			return false;	
	}
	
	public String query(String query){
		try {
			
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				queryResult = resultSet.getString(1); 
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		if(queryResult == null){
			return "  ";
		}
		
		return queryResult;
	}
	
	//pass an argument such as "insert into friend values ("moshe", "password", "url")
	public void insert(String query){
		try {			
			statement.execute(query);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}	
	
	//overloaded insert, pass a table and the values to give it
	public void insert(String table, ArrayList values){
		String query = "insert into " + table + " values (";
		
		for(int i = 0; i < values.size(); i++){
			if (values.get(i).getClass().getSimpleName().equals("String")){
				if(i == values.size() - 1)
					query += "'" + values.get(i) + "')";
				else 
					query += "'" + values.get(i) + "', ";
			}
			else{
				if(i == values.size() - 1)
					query += values.get(i) + ")";
				else 
					query += values.get(i) + ", ";
			}		
		}
		
		System.out.println(query);
		
		try {			
			statement.execute(query);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public void insertUsernamePassword(String username, String password){
		String query = "insert into thecalendar.friend values ('" + username +"', '" + password + "', 'URL')";
		try {			
			statement.execute(query);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public ArrayList getEvents(String userId){
		ArrayList list = new ArrayList();
		String query = "select * from theevent where user_groupid = '" + userId + "'";
		
		try {
			resultSet = statement.executeQuery(query);
			ResultSetMetaData wayTooMeta = resultSet.getMetaData();
			
			while(resultSet.next()) {
				for(int i = 1; i < wayTooMeta.getColumnCount() + 1; i++){
					if (resultSet.getObject(i).getClass().getSimpleName().equals("String"))
						list.add(resultSet.getString(i));
					else if (resultSet.getObject(i).getClass().getSimpleName().equals("Integer"))
						list.add(resultSet.getInt(i));
					else if (resultSet.getObject(i).getClass().getSimpleName().equals("Time"))
						list.add(resultSet.getTime(i));
				}
				
				//I know there are alternatives to this but for now, this is the simplest one
				list.add("THIS STRING IS THE BETWEEN EVENTS DELIMITER");
			}
			
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return list;
	}
	
	public List getGroups(String username){
		List groups = new List();
		String query = "select * from calGroup where username = '" + username + "'";
		try {
			resultSet = statement.executeQuery(query);
			
			int i = 0;
			while(resultSet.next()) {
				groups.add(resultSet.getString(3));
				i++;
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return groups;
	}
	
	
	public int getNumberOfGroupMembers(String groupName){
		String query = "select count(*) from calGroup where groupname = '" + groupName + "'";
		
		try {
			resultSet = statement.executeQuery(query);
			
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	
	public int getNumberOfEvents(){
		String query = "select count(*) from theevent";
		
		try {
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	
	public int getNumberOfEventsByUser(String username){
		String query = "select count(*) from theevent wher username = '" + username + "'" ;
		
		try {
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
}
