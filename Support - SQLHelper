package cal;

/*
 * give list specific types
 * use list instead of arraylist
 */


import java.awt.List;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.util.ArrayList;

/*
setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                help.closePath();
                System.exit(1);
            }
        });
*/

public class SQLHelper {
	private static Connection connection;
	private static Statement statement;
	private static ResultSet resultSet;
	private static String queryResult;
	private static String url = " ";
	private static String delimiter = "THIS STRING IS THE BETWEEN EVENTS DELIMITER";
	
	public static void main(String[] args){	
		SQLHelper help = new SQLHelper();
		
		System.out.println(help.getGroupMembersByGroupName("CSC330 Project"));
		//System.out.println(help.getCancelledEventNotifications("moshe"));
		/*
		 //if you run this commented block, you'll see that 
		//the user's input will always be encrypted to 32 characters
		 //so the database needs to store 32 char passwords not 16
		  
		StringBuilder a = new StringBuilder();
		
		for(int i = 0; i < Integer.MAX_VALUE / 150; i++)
			a.append(String.valueOf(i));
		
		String b = a.toString();
		
		System.out.println(a);
		System.out.println(help.encrypt(b));
		*/
	}
	
	SQLHelper(){
		//change this to your localhost's username and password
		url = "jdbc:mysql://localhost/thecalendar?useSSL=false&user=root&password=6815";
		
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			turnOffSafeUpdates();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void closePath(){
		try {
			if(statement != null ) 
				statement.close(); 
			if(connection != null) 
				connection.close(); 
			if(resultSet != null) 
				resultSet.close(); 
		}
		catch(SQLException ex ) {} 
	}
	
	private void turnOffSafeUpdates(){
		try {
			statement.execute("SET SQL_SAFE_UPDATES = 0");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void newGroup(String groupCreator, String groupName){
		String query = "insert calGroup values(" + (getHighestPrimaryKey("calGroup") + 1) + ", '" 
				+ groupCreator + "', '" + groupName + "', 1)";
		System.out.println(query);
		try{
			statement.execute(query);
		}
		catch (SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public boolean queryUsernamePassword(String username, String password){
		try {
			resultSet = statement.executeQuery("select userpassword from friend where username = '" + username + "'");
			
			while(resultSet.next())
				queryResult = resultSet.getString(1);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		if (password.equals(queryResult))
			return true;
		else 
			return false;	
	}
	
	public void insertEvent(ArrayList<?> deets){
		try {			
			statement.execute("insert theEvent values (" + deets.get(0) + ", '" 
					+ deets.get(1) + "', '" + deets.get(2) + "', '" + deets.get(3)
					+ "', " + deets.get(4) + ", " + deets.get (5)+ ", '" 
	                + deets.get(6)  + "', 1, " + deets.get(7) + ")");
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	
	public String getUsername(String username){
		//this method is only used when a user is trying to create
		//a new account and the input needs to be verified as a 
		//unique username
		
		try {
			resultSet = statement.executeQuery("select username from thecalendar.friend where username = '" + username +"'");
			
			while(resultSet.next()) {
				queryResult = resultSet.getString(1); 
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		if(queryResult == null){
			return "  ";
		}
		
		return queryResult;
	}
	
	public String query(String query){
		try {
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				queryResult = resultSet.getString(1); 
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		if(queryResult == null){
			return "  ";
		}
		
		return queryResult;
	}
	
	//pass an argument such as "insert into friend values ("moshe", "password", "url")
	public void insert(String query){
		try {			
			statement.execute(query);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}	
	
	//overloaded insert, pass a table and the values to give it
	public void insert(String table, ArrayList<?> values){
		String query = "insert into " + table + " values (";
	
		for(int i = 0; i < values.size(); i++){
			if (values.get(i).getClass().getSimpleName().equals("String")){
				if(i == values.size() - 1)
					query += "'" + values.get(i) + "')";
				else 
					query += "'" + values.get(i) + "', ";
			}
			else{
				if(i == values.size() - 1)
					query += values.get(i) + ")";
				else 
					query += values.get(i) + ", ";
			}		
		}
		
		System.out.println("For error-catching reasons:\n" + "Insertion = " + query);
		
		try {			
			statement.execute(query);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public void insertUsernamePassword(String username, String password){
		try {			
			statement.execute("insert into thecalendar.friend values ('" + username +"', '" + password + "', 'URL')");
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public ArrayList<? extends Object> isTimeAvailableForEvent(String groupName, String username, boolean isGroupEvent){
		ArrayList<Object> times = new ArrayList<Object>();
		String query;
		
		if(isGroupEvent)
			query = "select distinct startTimeOfEvent, endTimeofEvent, dateOfEvent, eventNumber "
						+ "from theevent where user_groupID in (select username from calgroup where " 
						+ "groupname = '" + groupName + "') or user_groupID in "  
						+ "(select groupName from calgroup where username in "
						+ "(select username from calgroup where groupname = '" + groupName + "'))";
		else 
			query = "select distinct startTimeOfEvent, endTimeofEvent, dateOfEvent, eventName "
					+ "from theevent where user_groupID = '" + username + "'";
		
		
		try {
			resultSet = statement.executeQuery(query);
			
			int i = 0;
			while(resultSet.next()) {
				for(i = 1; i <=4; i++)
					times.add(resultSet.getString(i));
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return times;
	}
	
	public void addUserToGroup(String username, String groupName, int a){
		try {			
			statement.execute("insert calgroup values (" + (getNumberOfElements("calGroup") + 1) + ", '" + username + "', '" + groupName + "'," + a + ")");
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}       
	}
	
	public ArrayList<?> getEvents(String userId){
		ArrayList<Object> list = new ArrayList<Object>();
		
		try {
			resultSet = statement.executeQuery("select * from theevent where user_groupid = '" + userId + "'");
			ResultSetMetaData wayTooMeta = resultSet.getMetaData();
			
			while(resultSet.next()) {
				for(int i = 1; i < wayTooMeta.getColumnCount() + 1; i++){
					if (resultSet.getObject(i).getClass().getSimpleName().equals("String"))
						list.add(resultSet.getString(i));
					else if (resultSet.getObject(i).getClass().getSimpleName().equals("Integer"))
						list.add(resultSet.getInt(i));
					else if (resultSet.getObject(i).getClass().getSimpleName().equals("Time"))
						list.add(resultSet.getTime(i));
				}
				
				//I know there are alternatives to this but for now, this is the simplest one
				list.add(delimiter);
			}
			
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return list;
	}
	
	public List getGroups(String username){
		List groups = new List();

		try {
			resultSet = statement.executeQuery("select * from calGroup where username = '" + username + "'");
			
			while(resultSet.next()) {
				groups.add(resultSet.getString(3));
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return groups;
	}
	
	public ArrayList<String> getGroupMembersByGroupName(String groupName){
		ArrayList<String> members = new ArrayList<String>();

		try {
			resultSet = statement.executeQuery("select * from calGroup where groupName= '" + groupName + "'");
			
			while(resultSet.next()) {
				members.add(resultSet.getString(2));
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return members;
	}
	
	public int getNumberOfGroupMembers(String groupName){
		try {
			resultSet = statement.executeQuery("select count(*) from calGroup where groupname = '" + groupName + "'");
			
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	public int getNumberOfElements(String tableName){
		return getHighestPrimaryKey(tableName);
		//don't use this method, use getHighestPrimaryKey(...)
		
		/*String query = "select count(*) from " + tableName;
		
		try {
			resultSet = statement.executeQuery(query);
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;*/
	}
	
	public int getNumberOfEventsByUser(String username){
		try {
			resultSet = statement.executeQuery("select count(*) from theevent where user_groupID = '" + username + "'");
			while(resultSet.next()) {
				return resultSet.getInt(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	
	public int isUserAdmin(String username){
		try {
			resultSet = statement.executeQuery("select * from calgroup where username = '" + username + "'");
			while(resultSet.next()) {
				return resultSet.getInt(4);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	
	public void deleteEvent(String groupName, String date, int time){
		try {			
			statement.execute("delete from theEvent where user_groupID = '" 
					+ groupName + "' and dateOfEvent =  '" 
					+ date + "' and startTimeOfEvent = " + time);
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void deleteCancelledEventNotification(CancelledEventNotification cen){
		try {			
			statement.execute("delete from notificationsCancelledEvent where groupName = '" + cen.getGroupName()
			+ "'and recipient = '" + cen.getRecipient() + "' and eventname = '"
			+ cen.getEventName() + "' and dateofevent = '" + cen.getDate() 
			+ "' and startTimeEvent = " + cen.getStartTime());
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void deleteNotificationGroup(Notification_Group n){
		try {			
			statement.execute("delete from notificationsGroup where sender = '" + n.getSender()
				+ "' and recipient = '" + n.getRecipient() 
				+ "' and groupName = '" + n.getGroupName() + "'");
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void deleteNotificationEvent(User user, Event event){
		try {			
			statement.execute("delete from notificationsevent where groupname = '" + event.getId()  
				+ "' and recipient = '" + user.getUsername() + "'and dateofevent = '" 
				+ event.getEventDate() + "' and starttimeofevent = " + event.getStartTime());
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void insertGroupNotification(Notification_Group gr){
		try{
			statement.execute("insert notificationsGroup values(" 
					+ getHighestPrimaryKey("notificationsGroup") + ", '" + gr.getSender()
					+ "', '" + gr.getRecipient() + "', '" + gr.getGroupName() + "')");
		}
		catch(SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void insertEventNotification(Notification_Event ev){
		try{
			statement.execute("insert notificationsEvent values(" + getHighestPrimaryKey("notificationsEvent")
			+ ", '" + ev.getGroupName() + "', '" + ev.getRecipient() + "', '"
			+ ev.getDate() + "', " + ev.getStartTime() + ", " + ev.getEndTime() + ")");
		} catch (SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void insertCancelledEventNotification(CancelledEventNotification cen){
		try{
			statement.execute("insert notificationscancelledevent values (" 
					+ getHighestPrimaryKey("notificationscancelledevent") + ", '"
					+ cen.getGroupName() + "', '" + cen.getRecipient() + "', '"
					+ cen.getEventName() + "', '" + cen.getDate() + "', " 
					+ cen.getStartTime() + ")");
		}catch(SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public int getHighestPrimaryKey(String tableName){
		String primaryKey = getPrimaryKeyForAnyTable(tableName);
		
		try {
			resultSet = statement.executeQuery("select " + primaryKey + " from " + tableName 
													+ " order by " + primaryKey + " desc");
			while(resultSet.next()) {
				System.out.println(resultSet.getInt(1));
				return resultSet.getInt(1) + 1;
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return -1;
	}
	
	public ArrayList<Event> getEventNotifications(String username){
	//this method is unecessarily complicated because the notifications table
	//doesn't store event data so a separate query needs to be made, using the
	//date from the notifications 
		
		ArrayList<Event> notifs = new ArrayList<Event>();
		ArrayList<Object> temp = new ArrayList<Object>();
		
		try {
			resultSet = statement.executeQuery("select * from notificationsEvent where recipient = '" + username + "'");
		
			while(resultSet.next()) {
				temp.add(resultSet.getString(2));
				temp.add(resultSet.getString(4));
				temp.add(resultSet.getString(5));
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		String[] queries = new String[temp.size() / 3];
		
		for(int a = 0; a < temp.size() / 3; a++){
			queries[a] = "select * from theevent where user_groupID = '" 
					+ temp.get(a * 3) + "' and dateOfEvent = '" + temp.get(a * 3 + 1) 
					+ "' and startTimeOfEvent = " 
					+ temp.get(a * 3 + 2).toString().substring(0, 2) 
					+ temp.get(a * 3 + 2).toString().substring(3, 5) + "00";		
		}
		
		for(int b = 0; b < queries.length; b++){
			ArrayList<Object> list = new ArrayList<Object>();
			
			try {
				resultSet = statement.executeQuery(queries[b]);
				ResultSetMetaData wayTooMeta = resultSet.getMetaData();
				
				while(resultSet.next()) {
					for(int i = 1; i < wayTooMeta.getColumnCount() + 1; i++){
						if (resultSet.getObject(i).getClass().getSimpleName().equals("String"))
							list.add(resultSet.getString(i));
						else if (resultSet.getObject(i).getClass().getSimpleName().equals("Integer"))
							list.add(resultSet.getInt(i));
						else if (resultSet.getObject(i).getClass().getSimpleName().equals("Time"))
							list.add(resultSet.getTime(i));
					}
					
					Event tempEvent = new Event(list);
					notifs.add(tempEvent);
				}
				
			}
			catch(SQLException ex ) {
				System.err.println("DB Exception: " + ex); 
			}	
		}
		
		return notifs;
	}
	
	public ArrayList<Notification_Group> getGroupNotifications(String username){
		ArrayList<Notification_Group> sender_and_group = new ArrayList<Notification_Group>();
		
		try {
			resultSet = statement.executeQuery("select * from notificationsGroup where recipient = '" + username + "'");
			while(resultSet.next()) {
				ArrayList<String> ohm = new ArrayList<String>();
				
				ohm.add(resultSet.getString(2));
				ohm.add(resultSet.getString(4));
				ohm.add(resultSet.getString(3));
				
				Notification_Group temp = new Notification_Group(ohm);
				
				sender_and_group.add(temp);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return sender_and_group;
	}
	
	public ArrayList<CancelledEventNotification> getCancelledEventNotifications(String username){
		
		ArrayList<String> one = new ArrayList<String>();
		ArrayList<Object> two = new ArrayList<Object>();
		ArrayList<CancelledEventNotification> locNotifs = new ArrayList<CancelledEventNotification>();
		
		try {			
			resultSet = statement.executeQuery("select * from notificationsCancelledEvent where recipient = '" + username + "'");
			
			while(resultSet.next()){
				one.add(resultSet.getString(2));
				one.add(resultSet.getString(3));
				two.add(resultSet.getString(4));
				two.add(resultSet.getString(5));
				two.add(resultSet.getString(6));
				locNotifs.add(new CancelledEventNotification(one, two));
				one.clear();
				two.clear();
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return locNotifs;
	}
	
	//needs to be tested
	public void addEventCancelledNotification(CancelledEventNotification cen){
		try{
			statement.execute("insert notificationscancelledevent values (" + getHighestPrimaryKey("notificationscancelledevent")
					+ ", '" + cen.getGroupName() + "', '" + cen.getRecipient() + "', '" 
					+ cen.getEventName() + "', " + cen.getStartTime() + ")");
		} 
		catch (SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}

	//needs to be tested
	public void addNotificationGroupRequest(Notification_Group gr){
		try{
			statement.execute("insert notificationsgroup values (" + getHighestPrimaryKey("notificationsgroup") 
						+ ", '" + gr.getSender() + "', '" + gr.getRecipient() + "', '" + gr.getGroupName() + "')");
		}
		catch(SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	//needs to be tested
	public void addNewEventNotification(Event evt, String recipient){
		try{
			statement.execute("insert notificationsevent values (" + getHighestPrimaryKey("notificationsevent") 
						+ ", '" + evt.getId() + "', '" + recipient + "', '" + evt.getEventDate() 
						+ "', " + evt.getStartTime() + ", " + evt.getEndTime() + "')");
		}
		catch(SQLException ex){
			System.err.println("DB Exception: " + ex); 
		}
	}
	
	public void giveYourApproval(Event evt){
	//this needs to be tested	
		try{
			statement.executeQuery("update theevent set approvalsNeeded =" + (evt.getNumberOfAccepted() + 1) + "where eventNumber =" + evt.getEventNumber());
		}
		catch (SQLException ex){
			System.err.println("DB Exception: " + ex);
		}	
	}
	
	public ArrayList<String> getGroupsThatHaveAskedForYourPresence(String username){
		ArrayList<String> groups = new ArrayList<String>();

		try {
			resultSet = statement.executeQuery("select * from notificationsGroup where recipient = '" + username + "'");
			
			while(resultSet.next()) {
				groups.add(resultSet.getString(4));
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}

		return groups;
	}
	
	private String getPrimaryKeyForAnyTable(String tableName){
		try {
			resultSet = statement.executeQuery("desc " + tableName);
			while(resultSet.next()) {
				return resultSet.getString(1);
			}
		}
		catch(SQLException ex ) {
			System.err.println("DB Exception: " + ex); 
		}
		
		return " ";
	}
	
	
	//this method was taken from online resources
	//some minor modifications were made 
	//but it is largely not our original code
    public String encrypt(String password) 
    {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            
            byte[] bytes = md.digest();
            StringBuilder sb = new StringBuilder();
            
            for(int i=0; i< bytes.length; i++)
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
 
            return sb.toString();
            
        } 
        catch (NoSuchAlgorithmException e) 
        {
            e.printStackTrace();
        }

        return "error";
    }
	
	public String getDelimiter(){
		return delimiter;
	}
}
